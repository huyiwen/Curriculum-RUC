#	ERROR	0
include	IDENTIFIER	0
<	OPERATOR	11
iostream	IDENTIFIER	1
>	OPERATOR	12
#	ERROR	0
include	IDENTIFIER	2
<	OPERATOR	11
fstream	IDENTIFIER	2
>	OPERATOR	12
#	ERROR	0
include	IDENTIFIER	3
<	OPERATOR	11
ctype	IDENTIFIER	3
.h>	ERROR	0
#	ERROR	0
include	IDENTIFIER	4
<	OPERATOR	11
string	IDENTIFIER	4
.h>	ERROR	0
#	ERROR	0
include	IDENTIFIER	5
<	OPERATOR	11
map	IDENTIFIER	5
>	OPERATOR	12
#	ERROR	0
include	IDENTIFIER	6
<	OPERATOR	11
string	IDENTIFIER	6
>	OPERATOR	12
#	ERROR	0
include	IDENTIFIER	6
<	OPERATOR	11
vector	IDENTIFIER	6
>	OPERATOR	12
// change input file path here	COMMENT	0
#	ERROR	0
define	IDENTIFIER	7
INPUT	IDENTIFIER	8
"data/test.in"	ERROR	0
// # define INPUT "lexer.cpp"	COMMENT	0
using	IDENTIFIER	9
namespace	IDENTIFIER	10
std	IDENTIFIER	11
;	SEPARATOR	4
char	IDENTIFIER	12
ch	IDENTIFIER	13
;	SEPARATOR	4
char	IDENTIFIER	14
next	IDENTIFIER	14
;	SEPARATOR	4
string	IDENTIFIER	15
token	IDENTIFIER	15
;	SEPARATOR	4
map	IDENTIFIER	16
<	OPERATOR	11
char	IDENTIFIER	16
,	SEPARATOR	5
int	KEYWORD	5
>	OPERATOR	12
SEPARATORS	IDENTIFIER	16
;	SEPARATOR	4
map	IDENTIFIER	17
<	OPERATOR	11
string	IDENTIFIER	17
,	SEPARATOR	5
int	KEYWORD	5
>	OPERATOR	12
OPERATORS	IDENTIFIER	17
;	SEPARATOR	4
map	IDENTIFIER	18
<	OPERATOR	11
string	IDENTIFIER	18
,	SEPARATOR	5
int	KEYWORD	5
>	OPERATOR	12
KEYS	IDENTIFIER	18
;	SEPARATOR	4
map	IDENTIFIER	19
<	OPERATOR	11
string	IDENTIFIER	19
,	SEPARATOR	5
int	KEYWORD	5
>	OPERATOR	12
IDENTIFIERS	IDENTIFIER	19
;	SEPARATOR	4
map	IDENTIFIER	20
<	OPERATOR	11
string	IDENTIFIER	20
,	SEPARATOR	5
int	KEYWORD	5
>	OPERATOR	12
CONSTS	IDENTIFIER	20
;	SEPARATOR	4
void	IDENTIFIER	21
printMap	IDENTIFIER	22
(	SEPARATOR	0
map	IDENTIFIER	23
<	OPERATOR	11
string	IDENTIFIER	23
,	SEPARATOR	5
int	KEYWORD	5
>	OPERATOR	12
dict	IDENTIFIER	23
,	SEPARATOR	5
ofstream	IDENTIFIER	24
*	OPERATOR	2
fout	IDENTIFIER	25
=	OPERATOR	10
nullptr	IDENTIFIER	26
)	SEPARATOR	1
{	SEPARATOR	2
for	IDENTIFIER	27
(	SEPARATOR	0
auto	IDENTIFIER	28
it	IDENTIFIER	29
=	OPERATOR	10
dict	IDENTIFIER	30
.cbegin();	ERROR	0
it	IDENTIFIER	30
!=	OPERATOR	0
dict	IDENTIFIER	30
.cend();	ERROR	0
++	OPERATOR	0
it	IDENTIFIER	30
)	SEPARATOR	1
{	SEPARATOR	2
cout	IDENTIFIER	30
<<	ERROR	0
it	IDENTIFIER	31
->first	ERROR	0
<<	ERROR	0
"	ERROR	0
"	ERROR	0
<<	ERROR	0
it	IDENTIFIER	31
->second<<	ERROR	0
"\n";	ERROR	0
if	KEYWORD	4
(	SEPARATOR	0
fout	IDENTIFIER	31
)	SEPARATOR	1
{	SEPARATOR	2
*(fout)	ERROR	0
<<	ERROR	0
it	IDENTIFIER	31
->first	ERROR	0
<<	ERROR	0
"	ERROR	0
"	ERROR	0
<<	ERROR	0
it	IDENTIFIER	31
->second<<	ERROR	0
"\n";	ERROR	0
}	SEPARATOR	3
}	SEPARATOR	3
}	SEPARATOR	3
void	IDENTIFIER	31
printMap	IDENTIFIER	31
(	SEPARATOR	0
map	IDENTIFIER	31
<	OPERATOR	11
char	IDENTIFIER	31
,	SEPARATOR	5
int	KEYWORD	5
>	OPERATOR	12
dict	IDENTIFIER	31
,	SEPARATOR	5
ofstream	IDENTIFIER	31
*	OPERATOR	2
fout	IDENTIFIER	31
=	OPERATOR	10
nullptr	IDENTIFIER	31
)	SEPARATOR	1
{	SEPARATOR	2
for	IDENTIFIER	31
(	SEPARATOR	0
auto	IDENTIFIER	31
it	IDENTIFIER	31
=	OPERATOR	10
dict	IDENTIFIER	31
.cbegin();	ERROR	0
it	IDENTIFIER	31
!=	OPERATOR	0
dict	IDENTIFIER	31
.cend();	ERROR	0
++	OPERATOR	0
it	IDENTIFIER	31
)	SEPARATOR	1
{	SEPARATOR	2
cout	IDENTIFIER	31
<<	ERROR	0
it	IDENTIFIER	31
->first	ERROR	0
<<	ERROR	0
"	ERROR	0
"	ERROR	0
<<	ERROR	0
it	IDENTIFIER	31
->second<<	ERROR	0
"\n";	ERROR	0
if	KEYWORD	4
(	SEPARATOR	0
fout	IDENTIFIER	31
)	SEPARATOR	1
{	SEPARATOR	2
*(fout)	ERROR	0
<<	ERROR	0
it	IDENTIFIER	31
->first	ERROR	0
<<	ERROR	0
"	ERROR	0
"	ERROR	0
<<	ERROR	0
it	IDENTIFIER	31
->second<<	ERROR	0
"\n";	ERROR	0
}	SEPARATOR	3
}	SEPARATOR	3
}	SEPARATOR	3
istream	IDENTIFIER	31
&	OPERATOR	9
getChar	IDENTIFIER	32
(	SEPARATOR	0
ifstream	IDENTIFIER	33
&	OPERATOR	9
fin	IDENTIFIER	34
,	SEPARATOR	5
char	IDENTIFIER	35
&	OPERATOR	9
c	IDENTIFIER	35
)	SEPARATOR	1
{	SEPARATOR	2
return	KEYWORD	6
fin	IDENTIFIER	36
.get(c);	ERROR	0
}	SEPARATOR	3
char	IDENTIFIER	36
peekChar	IDENTIFIER	36
(	SEPARATOR	0
ifstream	IDENTIFIER	37
&	OPERATOR	9
fin	IDENTIFIER	37
,	SEPARATOR	5
char	IDENTIFIER	37
&	OPERATOR	9
c	IDENTIFIER	37
)	SEPARATOR	1
{	SEPARATOR	2
c	IDENTIFIER	37
=	OPERATOR	10
fin	IDENTIFIER	37
.peek();	ERROR	0
return	KEYWORD	6
fin	IDENTIFIER	37
.peek();	ERROR	0
}	SEPARATOR	3
int	KEYWORD	5
isLetter	IDENTIFIER	37
(	SEPARATOR	0
char	IDENTIFIER	38
&	OPERATOR	9
c	IDENTIFIER	38
)	SEPARATOR	1
{	SEPARATOR	2
return	KEYWORD	6
isalpha	IDENTIFIER	38
(	SEPARATOR	0
c	IDENTIFIER	39
)	SEPARATOR	1
;	SEPARATOR	4
}	SEPARATOR	3
int	KEYWORD	5
isDigit	IDENTIFIER	39
(	SEPARATOR	0
char	IDENTIFIER	40
&	OPERATOR	9
c	IDENTIFIER	40
)	SEPARATOR	1
{	SEPARATOR	2
return	KEYWORD	6
isdigit	IDENTIFIER	40
(	SEPARATOR	0
c	IDENTIFIER	41
)	SEPARATOR	1
;	SEPARATOR	4
}	SEPARATOR	3
int	KEYWORD	5
read	IDENTIFIER	41
_predefined(const	ERROR	0
char	IDENTIFIER	42
*	OPERATOR	2
keyPath	IDENTIFIER	42
,	SEPARATOR	5
const	IDENTIFIER	43
char	IDENTIFIER	44
*	OPERATOR	2
sepPath	IDENTIFIER	44
,	SEPARATOR	5
const	IDENTIFIER	45
char	IDENTIFIER	45
*	OPERATOR	2
opPath	IDENTIFIER	45
)	SEPARATOR	1
{	SEPARATOR	2
// load reserved keywords, separators and operators	COMMENT	0
string	IDENTIFIER	46
tmps	IDENTIFIER	46
;	SEPARATOR	4
char	IDENTIFIER	47
tmpc	IDENTIFIER	47
;	SEPARATOR	4
int	KEYWORD	5
i	IDENTIFIER	48
=	OPERATOR	10
0	CONST	0
;	SEPARATOR	4
ifstream	IDENTIFIER	49
keyFile	IDENTIFIER	49
(	SEPARATOR	0
keyPath	IDENTIFIER	50
)	SEPARATOR	1
;	SEPARATOR	4
ifstream	IDENTIFIER	50
sepFile	IDENTIFIER	50
(	SEPARATOR	0
sepPath	IDENTIFIER	51
)	SEPARATOR	1
;	SEPARATOR	4
ifstream	IDENTIFIER	51
opFile	IDENTIFIER	51
(	SEPARATOR	0
opPath	IDENTIFIER	52
)	SEPARATOR	1
;	SEPARATOR	4
while	KEYWORD	7
(	SEPARATOR	0
keyFile	IDENTIFIER	52
>>	ERROR	0
tmps	IDENTIFIER	52
)	SEPARATOR	1
{	SEPARATOR	2
KEYS	IDENTIFIER	52
[tmps]	ERROR	0
=	OPERATOR	10
i	IDENTIFIER	52
;	SEPARATOR	4
++	OPERATOR	0
i	IDENTIFIER	52
;	SEPARATOR	4
}	SEPARATOR	3
i	IDENTIFIER	52
=	OPERATOR	10
0	CONST	1
;	SEPARATOR	4
while	KEYWORD	7
(	SEPARATOR	0
sepFile	IDENTIFIER	52
>>	ERROR	0
tmpc	IDENTIFIER	52
)	SEPARATOR	1
{	SEPARATOR	2
SEPARATORS	IDENTIFIER	52
[tmpc]	ERROR	0
=	OPERATOR	10
i	IDENTIFIER	52
;	SEPARATOR	4
++	OPERATOR	0
i	IDENTIFIER	52
;	SEPARATOR	4
}	SEPARATOR	3
i	IDENTIFIER	52
=	OPERATOR	10
0	CONST	1
;	SEPARATOR	4
while	KEYWORD	7
(	SEPARATOR	0
opFile	IDENTIFIER	52
>>	ERROR	0
tmps	IDENTIFIER	52
)	SEPARATOR	1
{	SEPARATOR	2
OPERATORS	IDENTIFIER	52
[tmps]	ERROR	0
=	OPERATOR	10
i	IDENTIFIER	52
;	SEPARATOR	4
++	OPERATOR	0
i	IDENTIFIER	52
;	SEPARATOR	4
}	SEPARATOR	3
return	KEYWORD	6
0	CONST	1
;	SEPARATOR	4
}	SEPARATOR	3
void	IDENTIFIER	52
initialize	IDENTIFIER	52
(	SEPARATOR	0
)	SEPARATOR	1
{	SEPARATOR	2
// load predefined maps	COMMENT	0
// FIXME, raise error if the file does not exist	COMMENT	0
const	IDENTIFIER	53
char	IDENTIFIER	53
*	OPERATOR	2
keyPath	IDENTIFIER	53
=	OPERATOR	10
"data/KeyWords.txt";	ERROR	0
const	IDENTIFIER	53
char	IDENTIFIER	53
*	OPERATOR	2
sepPath	IDENTIFIER	53
=	OPERATOR	10
"data/Separators.txt";	ERROR	0
const	IDENTIFIER	53
char	IDENTIFIER	53
*	OPERATOR	2
opPath	IDENTIFIER	53
=	OPERATOR	10
"data/Operators.txt";	ERROR	0
const	IDENTIFIER	53
char	IDENTIFIER	53
*	OPERATOR	2
typePath	IDENTIFIER	53
=	OPERATOR	10
"data/Types.txt";	ERROR	0
read	IDENTIFIER	54
_predefined(keyPath,	ERROR	0
sepPath	IDENTIFIER	54
,	SEPARATOR	5
opPath	IDENTIFIER	54
)	SEPARATOR	1
;	SEPARATOR	4
cout	IDENTIFIER	54
<<"initialization	ERROR	0
accomplished	IDENTIFIER	54
";	ERROR	0
printMap	IDENTIFIER	55
(	SEPARATOR	0
KEYS	IDENTIFIER	55
)	SEPARATOR	1
;	SEPARATOR	4
printMap	IDENTIFIER	55
(	SEPARATOR	0
SEPARATORS	IDENTIFIER	55
)	SEPARATOR	1
;	SEPARATOR	4
printMap	IDENTIFIER	55
(	SEPARATOR	0
OPERATORS	IDENTIFIER	55
)	SEPARATOR	1
;	SEPARATOR	4
}	SEPARATOR	3
void	IDENTIFIER	55
output	IDENTIFIER	55
(	SEPARATOR	0
ofstream	IDENTIFIER	56
&	OPERATOR	9
fout	IDENTIFIER	56
,	SEPARATOR	5
const	IDENTIFIER	56
string	IDENTIFIER	56
&	OPERATOR	9
attr	IDENTIFIER	56
,	SEPARATOR	5
string	IDENTIFIER	57
&	OPERATOR	9
value	IDENTIFIER	57
,	SEPARATOR	5
int	KEYWORD	5
index	IDENTIFIER	58
)	SEPARATOR	1
{	SEPARATOR	2
fout	IDENTIFIER	59
<<	ERROR	0
value	IDENTIFIER	59
<<	ERROR	0
'\t'	ERROR	0
<<	ERROR	0
attr	IDENTIFIER	59
<<	ERROR	0
'\t'	ERROR	0
<<	ERROR	0
index	IDENTIFIER	59
<<	ERROR	0
endl	IDENTIFIER	59
;	SEPARATOR	4
}	SEPARATOR	3
int	KEYWORD	5
isIn	IDENTIFIER	60
(	SEPARATOR	0
char	IDENTIFIER	61
&	OPERATOR	9
c	IDENTIFIER	61
,	SEPARATOR	5
const	IDENTIFIER	61
string	IDENTIFIER	61
&	OPERATOR	9
str	IDENTIFIER	61
)	SEPARATOR	1
{	SEPARATOR	2
for	IDENTIFIER	62
(	SEPARATOR	0
int	KEYWORD	5
i	IDENTIFIER	62
=	OPERATOR	10
0	CONST	1
;	SEPARATOR	4
i	IDENTIFIER	62
<	OPERATOR	11
str	IDENTIFIER	62
.size();i++){	ERROR	0
if	KEYWORD	4
(	SEPARATOR	0
c	IDENTIFIER	62
==	OPERATOR	13
str	IDENTIFIER	62
[i])	ERROR	0
return	KEYWORD	6
1	CONST	1
;	SEPARATOR	4
}	SEPARATOR	3
return	KEYWORD	6
0	CONST	2
;	SEPARATOR	4
}	SEPARATOR	3
void	IDENTIFIER	62
parse	IDENTIFIER	62
_error(ifstream	ERROR	0
&	OPERATOR	9
fin	IDENTIFIER	63
,	SEPARATOR	5
ofstream	IDENTIFIER	63
&	OPERATOR	9
fout	IDENTIFIER	63
,	SEPARATOR	5
bool	IDENTIFIER	63
append	IDENTIFIER	64
=	OPERATOR	10
true	IDENTIFIER	65
)	SEPARATOR	1
{	SEPARATOR	2
/* omit current error token and output error */	COMMENT	1
// append the current ch	COMMENT	0
if	KEYWORD	4
(	SEPARATOR	0
append	IDENTIFIER	66
)	SEPARATOR	1
token	IDENTIFIER	66
+=	OPERATOR	0
ch	IDENTIFIER	66
;	SEPARATOR	4
while	KEYWORD	7
(	SEPARATOR	0
getChar	IDENTIFIER	66
(	SEPARATOR	0
fin	IDENTIFIER	66
,	SEPARATOR	5
ch	IDENTIFIER	66
)	SEPARATOR	1
&&	OPERATOR	0
!isIn	IDENTIFIER	66
(	SEPARATOR	0
ch	IDENTIFIER	67
,	SEPARATOR	5
"\n	ERROR	0
")){	ERROR	0
token	IDENTIFIER	67
+=	OPERATOR	0
ch	IDENTIFIER	67
;	SEPARATOR	4
}	SEPARATOR	3
output	IDENTIFIER	67
(	SEPARATOR	0
fout	IDENTIFIER	67
,	SEPARATOR	5
"ERROR",	ERROR	0
token	IDENTIFIER	67
,	SEPARATOR	5
0	CONST	2
)	SEPARATOR	1
;	SEPARATOR	4
token	IDENTIFIER	67
.clear();	ERROR	0
}	SEPARATOR	3
void	IDENTIFIER	67
parse	IDENTIFIER	67
_comment_line(ifstream&fin,	ERROR	0
ofstream	IDENTIFIER	67
&	OPERATOR	9
fout	IDENTIFIER	67
)	SEPARATOR	1
{	SEPARATOR	2
/* omit current line and output comment */	COMMENT	1
while	KEYWORD	7
(	SEPARATOR	0
getChar	IDENTIFIER	67
(	SEPARATOR	0
fin	IDENTIFIER	67
,	SEPARATOR	5
ch	IDENTIFIER	67
)	SEPARATOR	1
&&	OPERATOR	0
!isIn	IDENTIFIER	67
(	SEPARATOR	0
ch	IDENTIFIER	67
,	SEPARATOR	5
"\n")){	ERROR	0
token	IDENTIFIER	67
+=	OPERATOR	0
ch	IDENTIFIER	67
;	SEPARATOR	4
}	SEPARATOR	3
output	IDENTIFIER	67
(	SEPARATOR	0
fout	IDENTIFIER	67
,	SEPARATOR	5
"COMMENT",	ERROR	0
token	IDENTIFIER	67
,	SEPARATOR	5
0	CONST	2
)	SEPARATOR	1
;	SEPARATOR	4
token	IDENTIFIER	67
.clear();	ERROR	0
}	SEPARATOR	3
void	IDENTIFIER	67
parse	IDENTIFIER	67
_comment_block(ifstream&fin,	ERROR	0
ofstream	IDENTIFIER	67
&	OPERATOR	9
fout	IDENTIFIER	67
)	SEPARATOR	1
{	SEPARATOR	2
/* omit line between comment signals, strip off \n */	COMMENT	1
char	IDENTIFIER	67
tmp	IDENTIFIER	67
=	OPERATOR	10
'\0';	ERROR	0
while	KEYWORD	7
(	SEPARATOR	0
getChar	IDENTIFIER	68
(	SEPARATOR	0
fin	IDENTIFIER	68
,	SEPARATOR	5
ch	IDENTIFIER	68
)	SEPARATOR	1
)	SEPARATOR	1
{	SEPARATOR	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	68
!=	OPERATOR	0
'\n'){	ERROR	0
token	IDENTIFIER	68
+=	OPERATOR	0
ch	IDENTIFIER	68
;	SEPARATOR	4
}	SEPARATOR	3
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	68
==	OPERATOR	13
'*'	ERROR	0
&&	OPERATOR	0
peekChar	IDENTIFIER	68
(	SEPARATOR	0
fin	IDENTIFIER	68
,	SEPARATOR	5
tmp	IDENTIFIER	68
)	SEPARATOR	1
&&	OPERATOR	0
tmp	IDENTIFIER	68
==	OPERATOR	13
'/'){	ERROR	0
getChar	IDENTIFIER	68
(	SEPARATOR	0
fin	IDENTIFIER	68
,	SEPARATOR	5
ch	IDENTIFIER	68
)	SEPARATOR	1
;	SEPARATOR	4
token	IDENTIFIER	68
+=	OPERATOR	0
ch	IDENTIFIER	68
;	SEPARATOR	4
output	IDENTIFIER	68
(	SEPARATOR	0
fout	IDENTIFIER	68
,	SEPARATOR	5
"COMMENT",	ERROR	0
token	IDENTIFIER	68
,	SEPARATOR	5
1	CONST	2
)	SEPARATOR	1
;	SEPARATOR	4
token	IDENTIFIER	68
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
}	SEPARATOR	3
parse	IDENTIFIER	68
_error(fin,	ERROR	0
fout	IDENTIFIER	68
,	SEPARATOR	5
false	IDENTIFIER	68
)	SEPARATOR	1
;	SEPARATOR	4
}	SEPARATOR	3
void	IDENTIFIER	69
parse	IDENTIFIER	69
_keyword_and_identifier(ifstream	ERROR	0
&	OPERATOR	9
fin	IDENTIFIER	69
,	SEPARATOR	5
ofstream	IDENTIFIER	69
&	OPERATOR	9
fout	IDENTIFIER	69
)	SEPARATOR	1
{	SEPARATOR	2
string	IDENTIFIER	69
s	IDENTIFIER	69
;	SEPARATOR	4
token	IDENTIFIER	70
+=	OPERATOR	0
ch	IDENTIFIER	70
;	SEPARATOR	4
while	KEYWORD	7
(	SEPARATOR	0
getChar	IDENTIFIER	70
(	SEPARATOR	0
fin	IDENTIFIER	70
,	SEPARATOR	5
ch	IDENTIFIER	70
)	SEPARATOR	1
&&	OPERATOR	0
(	SEPARATOR	0
isLetter	IDENTIFIER	70
(	SEPARATOR	0
ch	IDENTIFIER	70
)	SEPARATOR	1
||	OPERATOR	0
isDigit	IDENTIFIER	70
(	SEPARATOR	0
ch	IDENTIFIER	70
)	SEPARATOR	1
)	SEPARATOR	1
)	SEPARATOR	1
{	SEPARATOR	2
token	IDENTIFIER	70
+=	OPERATOR	0
ch	IDENTIFIER	70
;	SEPARATOR	4
}	SEPARATOR	3
if	KEYWORD	4
(	SEPARATOR	0
KEYS	IDENTIFIER	70
.find(token)	ERROR	0
==	OPERATOR	13
KEYS	IDENTIFIER	70
.end()){	ERROR	0
IDENTIFIERS	IDENTIFIER	70
[token]	ERROR	0
=	OPERATOR	10
IDENTIFIERS	IDENTIFIER	70
.size();	ERROR	0
output	IDENTIFIER	70
(	SEPARATOR	0
fout	IDENTIFIER	70
,	SEPARATOR	5
"IDENTIFIER",	ERROR	0
token	IDENTIFIER	70
,	SEPARATOR	5
IDENTIFIERS	IDENTIFIER	70
[token]);	ERROR	0
}	SEPARATOR	3
else	KEYWORD	2
{	SEPARATOR	2
output	IDENTIFIER	70
(	SEPARATOR	0
fout	IDENTIFIER	70
,	SEPARATOR	5
"KEYWORD",	ERROR	0
token	IDENTIFIER	70
,	SEPARATOR	5
KEYS	IDENTIFIER	70
[token]);	ERROR	0
}	SEPARATOR	3
token	IDENTIFIER	70
.clear();	ERROR	0
// if the following is in separators, operators and spaces, continue	COMMENT	0
if	KEYWORD	4
(	SEPARATOR	0
SEPARATORS	IDENTIFIER	70
.find(ch)	ERROR	0
!=	OPERATOR	0
SEPARATORS	IDENTIFIER	70
.end()	ERROR	0
||	OPERATOR	0
OPERATORS	IDENTIFIER	70
.find(s+ch)	ERROR	0
!=	OPERATOR	0
OPERATORS	IDENTIFIER	70
.end()	ERROR	0
||	OPERATOR	0
isIn	IDENTIFIER	70
(	SEPARATOR	0
ch	IDENTIFIER	70
,	SEPARATOR	5
"	ERROR	0
\n")){	ERROR	0
fin	IDENTIFIER	70
.putback(ch);	ERROR	0
}	SEPARATOR	3
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	70
_error(fin,fout);	ERROR	0
}	SEPARATOR	3
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
void	IDENTIFIER	70
parse	IDENTIFIER	70
_digit_and_decimal(ifstream	ERROR	0
&	OPERATOR	9
fin	IDENTIFIER	70
,	SEPARATOR	5
ofstream	IDENTIFIER	70
&	OPERATOR	9
fout	IDENTIFIER	70
)	SEPARATOR	1
{	SEPARATOR	2
bool	IDENTIFIER	70
isInt	IDENTIFIER	70
=	OPERATOR	10
false	IDENTIFIER	71
;	SEPARATOR	4
bool	IDENTIFIER	71
isDecimal	IDENTIFIER	71
=	OPERATOR	10
false	IDENTIFIER	72
;	SEPARATOR	4
// scientific notation (e|E)	COMMENT	0
bool	IDENTIFIER	72
isSN	IDENTIFIER	72
=	OPERATOR	10
false	IDENTIFIER	73
;	SEPARATOR	4
bool	IDENTIFIER	73
isError	IDENTIFIER	73
=	OPERATOR	10
false	IDENTIFIER	74
;	SEPARATOR	4
char	IDENTIFIER	74
tmp	IDENTIFIER	74
=	OPERATOR	10
'\0';	ERROR	0
// important to parse the digit from zero position	COMMENT	0
fin	IDENTIFIER	74
.putback(ch);	ERROR	0
while	KEYWORD	7
(	SEPARATOR	0
getChar	IDENTIFIER	74
(	SEPARATOR	0
fin	IDENTIFIER	74
,	SEPARATOR	5
ch	IDENTIFIER	74
)	SEPARATOR	1
&&	OPERATOR	0
(	SEPARATOR	0
isDigit	IDENTIFIER	74
(	SEPARATOR	0
ch	IDENTIFIER	74
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	74
(	SEPARATOR	0
ch	IDENTIFIER	74
,	SEPARATOR	5
".eE+-"))){	ERROR	0
switch	IDENTIFIER	74
(	SEPARATOR	0
ch	IDENTIFIER	75
)	SEPARATOR	1
{	SEPARATOR	2
case	IDENTIFIER	75
'.':	ERROR	0
// 1..2 1.2.3	COMMENT	0
if	KEYWORD	4
(	SEPARATOR	0
isDecimal	IDENTIFIER	76
)	SEPARATOR	1
{	SEPARATOR	2
parse	IDENTIFIER	76
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
token	IDENTIFIER	76
+=	OPERATOR	0
ch	IDENTIFIER	76
;	SEPARATOR	4
isDecimal	IDENTIFIER	76
=	OPERATOR	10
true	IDENTIFIER	76
;	SEPARATOR	4
break	KEYWORD	0
;	SEPARATOR	4
case	IDENTIFIER	76
'e':	ERROR	0
case	IDENTIFIER	76
'E':	ERROR	0
// 3E4E5	COMMENT	0
if	KEYWORD	4
(	SEPARATOR	0
isSN	IDENTIFIER	76
)	SEPARATOR	1
{	SEPARATOR	2
parse	IDENTIFIER	76
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
token	IDENTIFIER	76
+=	OPERATOR	0
ch	IDENTIFIER	76
;	SEPARATOR	4
isSN	IDENTIFIER	76
=	OPERATOR	10
true	IDENTIFIER	76
;	SEPARATOR	4
isDecimal	IDENTIFIER	76
=	OPERATOR	10
false	IDENTIFIER	76
;	SEPARATOR	4
break	KEYWORD	0
;	SEPARATOR	4
case	IDENTIFIER	76
'+':	ERROR	0
case	IDENTIFIER	76
'-':	ERROR	0
if	KEYWORD	4
(	SEPARATOR	0
peekChar	IDENTIFIER	76
(	SEPARATOR	0
fin	IDENTIFIER	76
,	SEPARATOR	5
tmp	IDENTIFIER	76
)	SEPARATOR	1
&&	OPERATOR	0
!isDigit	IDENTIFIER	76
(	SEPARATOR	0
tmp	IDENTIFIER	77
)	SEPARATOR	1
)	SEPARATOR	1
{	SEPARATOR	2
parse	IDENTIFIER	77
_error(fin,	ERROR	0
fout	IDENTIFIER	77
)	SEPARATOR	1
;	SEPARATOR	4
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
!isSN	IDENTIFIER	77
)	SEPARATOR	1
{	SEPARATOR	2
CONSTS	IDENTIFIER	78
[token]	ERROR	0
=	OPERATOR	10
CONSTS	IDENTIFIER	78
.size();	ERROR	0
output	IDENTIFIER	78
(	SEPARATOR	0
fout	IDENTIFIER	78
,	SEPARATOR	5
"CONST",	ERROR	0
token	IDENTIFIER	78
,	SEPARATOR	5
CONSTS	IDENTIFIER	78
[token]);	ERROR	0
token	IDENTIFIER	78
.clear();	ERROR	0
fin	IDENTIFIER	78
.putback(ch);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
{	SEPARATOR	2
token	IDENTIFIER	78
+=	OPERATOR	0
ch	IDENTIFIER	78
;	SEPARATOR	4
}	SEPARATOR	3
break	KEYWORD	0
;	SEPARATOR	4
default	IDENTIFIER	78
// 0b	COMMENT	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
peekChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
&&	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
&&	OPERATOR	0
!isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"Ee")){	ERROR	0
parse	IDENTIFIER	79
_error(fin,fout,false);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
break	KEYWORD	0
;	SEPARATOR	4
}	SEPARATOR	3
}	SEPARATOR	3
// putback the last illegal character because it may be part of others	COMMENT	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
CONSTS	IDENTIFIER	79
[token]	ERROR	0
=	OPERATOR	10
CONSTS	IDENTIFIER	79
.size();	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"CONST",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
CONSTS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
}	SEPARATOR	3
void	IDENTIFIER	79
parse	IDENTIFIER	79
_operator(ifstream	ERROR	0
&	OPERATOR	9
fin	IDENTIFIER	79
,	SEPARATOR	5
ofstream	IDENTIFIER	79
&	OPERATOR	9
fout	IDENTIFIER	79
)	SEPARATOR	1
{	SEPARATOR	2
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
switch	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
{	SEPARATOR	2
case	IDENTIFIER	79
'=':	ERROR	0
getChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"	ERROR	0
")){	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'='){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	79
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
case	IDENTIFIER	79
'<':	ERROR	0
getChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"	ERROR	0
")){	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'='){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	79
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
case	IDENTIFIER	79
'>':	ERROR	0
getChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"	ERROR	0
\n")){	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'='){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	79
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
case	IDENTIFIER	79
'+':	ERROR	0
getChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"	ERROR	0
")){	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'='){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'+'){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	79
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
case	IDENTIFIER	79
'-':	ERROR	0
getChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"	ERROR	0
")){	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'='){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'-'){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	79
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
case	IDENTIFIER	79
'*':	ERROR	0
getChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"	ERROR	0
")){	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'='){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'*'){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	79
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
case	IDENTIFIER	79
'/':	ERROR	0
getChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"	ERROR	0
")){	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'='){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'/'){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
parse	IDENTIFIER	79
_comment_line(fin,	ERROR	0
fout	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'*'){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
parse	IDENTIFIER	79
_comment_block(fin,	ERROR	0
fout	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	79
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
case	IDENTIFIER	79
'%':	ERROR	0
getChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"	ERROR	0
")){	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
// FIXME, any illegal signal next to < should be taken into consideration	COMMENT	0
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	79
_error(fin,fout);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
case	IDENTIFIER	79
'|':	ERROR	0
getChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"	ERROR	0
")){	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATORr",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'|'){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
// FIXME, any illegal signal next to < should be taken into consideration	COMMENT	0
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	79
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
case	IDENTIFIER	79
'&':	ERROR	0
getChar	IDENTIFIER	79
(	SEPARATOR	0
fin	IDENTIFIER	79
,	SEPARATOR	5
ch	IDENTIFIER	79
)	SEPARATOR	1
;	SEPARATOR	4
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isLetter	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
||	OPERATOR	0
isIn	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
,	SEPARATOR	5
"	ERROR	0
")){	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
fin	IDENTIFIER	79
.putback(ch);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	79
==	OPERATOR	13
'&'){	ERROR	0
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"OPERATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
OPERATORS	IDENTIFIER	79
[token]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
// FIXME, any illegal signal next to < should be taken into consideration	COMMENT	0
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	79
_error(fin,fout);	ERROR	0
return	KEYWORD	6
;	SEPARATOR	4
}	SEPARATOR	3
default	IDENTIFIER	79
break	KEYWORD	0
;	SEPARATOR	4
}	SEPARATOR	3
}	SEPARATOR	3
void	IDENTIFIER	79
parse	IDENTIFIER	79
_separator(ifstream	ERROR	0
&	OPERATOR	9
fin	IDENTIFIER	79
,	SEPARATOR	5
ofstream	IDENTIFIER	79
&	OPERATOR	9
fout	IDENTIFIER	79
)	SEPARATOR	1
{	SEPARATOR	2
token	IDENTIFIER	79
+=	OPERATOR	0
ch	IDENTIFIER	79
;	SEPARATOR	4
switch	IDENTIFIER	79
(	SEPARATOR	0
ch	IDENTIFIER	79
)	SEPARATOR	1
{	SEPARATOR	2
case	IDENTIFIER	79
'{':	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"SEPARATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
SEPARATORS	IDENTIFIER	79
[ch]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
break	KEYWORD	0
;	SEPARATOR	4
case	IDENTIFIER	79
'}':	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"SEPARATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
SEPARATORS	IDENTIFIER	79
[ch]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
break	KEYWORD	0
;	SEPARATOR	4
case	IDENTIFIER	79
';':	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"SEPARATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
SEPARATORS	IDENTIFIER	79
[ch]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
break	KEYWORD	0
;	SEPARATOR	4
case	IDENTIFIER	79
',':	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"SEPARATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
SEPARATORS	IDENTIFIER	79
[ch]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
break	KEYWORD	0
;	SEPARATOR	4
case	IDENTIFIER	79
'(':	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"SEPARATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
SEPARATORS	IDENTIFIER	79
[ch]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
break	KEYWORD	0
;	SEPARATOR	4
case	IDENTIFIER	79
')':	ERROR	0
output	IDENTIFIER	79
(	SEPARATOR	0
fout	IDENTIFIER	79
,	SEPARATOR	5
"SEPARATOR",	ERROR	0
token	IDENTIFIER	79
,	SEPARATOR	5
SEPARATORS	IDENTIFIER	79
[ch]);	ERROR	0
token	IDENTIFIER	79
.clear();	ERROR	0
break	KEYWORD	0
;	SEPARATOR	4
default	IDENTIFIER	79
break	KEYWORD	0
;	SEPARATOR	4
}	SEPARATOR	3
}	SEPARATOR	3
int	KEYWORD	5
main	IDENTIFIER	79
(	SEPARATOR	0
int	KEYWORD	5
argc	IDENTIFIER	80
,	SEPARATOR	5
char	IDENTIFIER	81
const	IDENTIFIER	81
*	OPERATOR	2
argv	IDENTIFIER	81
[])	ERROR	0
{	SEPARATOR	2
int	KEYWORD	5
code	IDENTIFIER	82
=	OPERATOR	10
0	CONST	2
;	SEPARATOR	4
char	IDENTIFIER	83
tmp	IDENTIFIER	83
;	SEPARATOR	4
string	IDENTIFIER	83
tmps	IDENTIFIER	83
;	SEPARATOR	4
ifstream	IDENTIFIER	83
fin	IDENTIFIER	83
;	SEPARATOR	4
ofstream	IDENTIFIER	83
fout	IDENTIFIER	83
;	SEPARATOR	4
ofstream	IDENTIFIER	83
identifiers	IDENTIFIER	83
;	SEPARATOR	4
ofstream	IDENTIFIER	84
consts	IDENTIFIER	84
;	SEPARATOR	4
fin	IDENTIFIER	85
.open(INPUT,ifstream::in);	ERROR	0
fout	IDENTIFIER	85
.open("result.txt",ofstream::out);	ERROR	0
identifiers	IDENTIFIER	85
.open("identifiers.txt",ofstream::out);	ERROR	0
consts	IDENTIFIER	85
.open("consts.txt",ofstream::out);	ERROR	0
initialize	IDENTIFIER	85
(	SEPARATOR	0
)	SEPARATOR	1
;	SEPARATOR	4
while	KEYWORD	7
(	SEPARATOR	0
getChar	IDENTIFIER	85
(	SEPARATOR	0
fin	IDENTIFIER	85
,	SEPARATOR	5
ch	IDENTIFIER	85
)	SEPARATOR	1
)	SEPARATOR	1
{	SEPARATOR	2
// make sure ch is not ' '	COMMENT	0
if	KEYWORD	4
(	SEPARATOR	0
ch	IDENTIFIER	85
==	OPERATOR	13
'	ERROR	0
'	ERROR	0
||	OPERATOR	0
ch	IDENTIFIER	85
==	OPERATOR	13
'\n'	ERROR	0
||	OPERATOR	0
ch	IDENTIFIER	85
==	OPERATOR	13
'\t'){	ERROR	0
token	IDENTIFIER	85
.clear();	ERROR	0
continue	KEYWORD	1
;	SEPARATOR	4
}	SEPARATOR	3
// Keywords and Identifiers	COMMENT	0
if	KEYWORD	4
(	SEPARATOR	0
isLetter	IDENTIFIER	85
(	SEPARATOR	0
ch	IDENTIFIER	85
)	SEPARATOR	1
)	SEPARATOR	1
{	SEPARATOR	2
parse	IDENTIFIER	85
_keyword_and_identifier(fin,fout);	ERROR	0
}	SEPARATOR	3
// Digits	COMMENT	0
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
isDigit	IDENTIFIER	85
(	SEPARATOR	0
ch	IDENTIFIER	85
)	SEPARATOR	1
)	SEPARATOR	1
{	SEPARATOR	2
parse	IDENTIFIER	85
_digit_and_decimal(fin,fout);	ERROR	0
}	SEPARATOR	3
// Operators	COMMENT	0
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
OPERATORS	IDENTIFIER	85
.find(tmps+ch)	ERROR	0
!=	OPERATOR	0
OPERATORS	IDENTIFIER	85
.end()){	ERROR	0
parse	IDENTIFIER	85
_operator(fin,fout);	ERROR	0
}	SEPARATOR	3
// Separators	COMMENT	0
else	KEYWORD	2
if	KEYWORD	4
(	SEPARATOR	0
SEPARATORS	IDENTIFIER	85
.find(ch)	ERROR	0
!=	OPERATOR	0
SEPARATORS	IDENTIFIER	85
.end()){	ERROR	0
parse	IDENTIFIER	85
_separator(fin,fout);	ERROR	0
}	SEPARATOR	3
// Unknown	COMMENT	0
else	KEYWORD	2
{	SEPARATOR	2
parse	IDENTIFIER	85
_error(fin,	ERROR	0
fout	IDENTIFIER	85
,	SEPARATOR	5
true	IDENTIFIER	85
)	SEPARATOR	1
;	SEPARATOR	4
}	SEPARATOR	3
}	SEPARATOR	3
printMap	IDENTIFIER	85
(	SEPARATOR	0
IDENTIFIERS	IDENTIFIER	85
,	SEPARATOR	5
&	OPERATOR	9
identifiers	IDENTIFIER	85
)	SEPARATOR	1
;	SEPARATOR	4
printMap	IDENTIFIER	85
(	SEPARATOR	0
CONSTS	IDENTIFIER	85
,	SEPARATOR	5
&	OPERATOR	9
consts	IDENTIFIER	85
)	SEPARATOR	1
;	SEPARATOR	4
fin	IDENTIFIER	85
.close();	ERROR	0
fout	IDENTIFIER	85
.close();	ERROR	0
return	KEYWORD	6
0	CONST	2
;	SEPARATOR	4
}	SEPARATOR	3
